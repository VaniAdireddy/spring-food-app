# todo Define a PersistentVolumeClaim (PVC) for MySQL storage, dynamically provisioned by the cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pv-claim
  labels:
    app: mysql
#    tier: database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi   # todo Adjust the storage size as needed
---
# todo Define the Deployment for the MySQL database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  labels:
    app: mysql
#    tier: database
spec:
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata: #Must match 'Service' and 'Deployment' selectors
      labels:
        app: mysql
    #        tier: database
    spec:
      containers:
        - name: mysql
          image: mysql:8.0.36   # Use the desired MySQL image
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secrets
                  key: password

            - name: MYSQL_DATABASE # Setting Database Name from a 'ConfigMap'
              valueFrom:
                configMapKeyRef:
                  name: db-config
                  key: dbName  # Set your desired database name
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-pv-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-pv-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
---
# Define a Service to expose MySQL to other services
apiVersion: v1
kind: Service
metadata:
  name: mysql  # DNS name
  labels:
    app: mysql
#    tier: database
spec:
  ports:
    - port: 3306
      targetPort: 3306
  selector: # mysql Pod Should contain same labels
    app: mysql
  #    tier: database
  clusterIP: None  # We Use DNS, Thus ClusterIP is not relevant
---